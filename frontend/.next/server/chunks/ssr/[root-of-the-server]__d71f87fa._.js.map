{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///F:/healthFirst/frontend/src/app/lib/axiosClient.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { store } from '../store/store';\r\nimport { logoutUser } from '../store/authSlice';\r\nconst baseURL = process.env.NEXT_PUBLIC_API_URL;;\r\n\r\nconst api = axios.create({\r\n  baseURL: baseURL,\r\n  withCredentials: true,\r\n});\r\n\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      try {\r\n        await axios.post(`${baseURL}/auth/refresh-token`, {}, {\r\n          withCredentials: true,\r\n        });\r\n        return api(originalRequest);\r\n      } catch (refreshError) {\r\n        store.dispatch(logoutUser());\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AACA,MAAM,UAAU,QAAQ,GAAG,CAAC,mBAAmB;AAE/C,MAAM,MAAM,gJAAK,CAAC,MAAM,CAAC;IACvB,SAAS;IACT,iBAAiB;AACnB;AAEA,IAAI,YAAY,CAAC,QAAQ,CAAC,GAAG,CAC3B,CAAC,WAAa,UACd,OAAO;IACL,MAAM,kBAAkB,MAAM,MAAM;IACpC,IAAI,MAAM,QAAQ,EAAE,WAAW,OAAO,CAAC,gBAAgB,MAAM,EAAE;QAC7D,gBAAgB,MAAM,GAAG;QACzB,IAAI;YACF,MAAM,gJAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,mBAAmB,CAAC,EAAE,CAAC,GAAG;gBACpD,iBAAiB;YACnB;YACA,OAAO,IAAI;QACb,EAAE,OAAO,cAAc;YACrB,qIAAK,CAAC,QAAQ,CAAC,IAAA,+IAAU;YACzB,OAAO,QAAQ,MAAM,CAAC;QACxB;IACF;IACA,OAAO,QAAQ,MAAM,CAAC;AACxB;uCAGa","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///F:/healthFirst/frontend/src/app/store/authSlice.tsx"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport api from '../lib/axiosClient';\r\nimport type { AuthState, User, UserRole } from './types';\r\n\r\ninterface LoginResponse {\r\n  role: UserRole;\r\n}\r\ninterface LoginCredentials {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface ApiResponse<T> {\r\n  data: T;\r\n}\r\n\r\ninterface AuthStatusResponse {\r\n  data: {\r\n    user: User;\r\n  };\r\n}\r\n\r\nexport const loginUser = createAsyncThunk<LoginResponse, LoginCredentials, { rejectValue: string }>(\r\n  'auth/login',\r\n  async (credentials, { rejectWithValue }) => {\r\n    try {\r\n      const response = await api.post<ApiResponse<LoginResponse>>('/auth/login', credentials);\r\n      return response.data.data;\r\n    } catch (error: unknown) {\r\n      const err = error as { response?: { data?: { message?: string } } };\r\n      return rejectWithValue(err.response?.data?.message || 'Login failed');\r\n    }\r\n  }\r\n);\r\n\r\nexport const logoutUser = createAsyncThunk('auth/logout', async (_, { rejectWithValue }) => {\r\n  try {\r\n    await api.post('/auth/logout');\r\n  } catch (error: unknown) {\r\n    const err = error as { response?: { data?: { message?: string } } };\r\n    return rejectWithValue(err.response?.data?.message || 'Logout failed');\r\n  }\r\n});\r\n\r\nexport const checkAuthStatus = createAsyncThunk<{ user: User }, void, { rejectValue: string }>(\r\n  'auth/checkStatus',\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const response = await api.get<AuthStatusResponse>('/auth/me');\r\n      return response.data.data;\r\n    } catch (error: unknown) {\r\n      const err = error as { response?: { data?: { message?: string } } };\r\n      return rejectWithValue(err.response?.data?.message || 'Not authenticated');\r\n    }\r\n  }\r\n);\r\n\r\nconst initialState: AuthState = {\r\n  user: null,\r\n  isAuthenticated: false,\r\n  role: null,\r\n  status: 'idle',\r\n  error: null,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    // Add a manual reset action for immediate state clearing\r\n    resetAuth: (state) => {\r\n      state.user = null;\r\n      state.isAuthenticated = false;\r\n      state.role = null;\r\n      state.status = 'idle';\r\n      state.error = null;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loginUser.pending, (state) => {\r\n        state.status = 'loading';\r\n        state.error = null;\r\n      })\r\n      .addCase(loginUser.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.isAuthenticated = true;\r\n        state.role = action.payload.role;\r\n      })\r\n      .addCase(loginUser.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.payload;\r\n      })\r\n      .addCase(logoutUser.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(logoutUser.fulfilled, (state) => {\r\n        state.isAuthenticated = false;\r\n        state.user = null;\r\n        state.role = null;\r\n        state.status = 'succeeded'; // Changed from 'idle' to 'succeeded'\r\n        state.error = null;\r\n      })\r\n      .addCase(logoutUser.rejected, (state) => {\r\n        // Even if logout fails, clear the auth state\r\n        state.isAuthenticated = false;\r\n        state.user = null;\r\n        state.role = null;\r\n        state.status = 'failed';\r\n      })\r\n      .addCase(checkAuthStatus.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(checkAuthStatus.fulfilled, (state, action) => {\r\n        state.isAuthenticated = true;\r\n        state.user = action.payload.user;\r\n        state.role = action.payload.user.role;\r\n        state.status = 'succeeded';\r\n        state.error = null;\r\n      })\r\n      .addCase(checkAuthStatus.rejected, (state) => {\r\n        state.isAuthenticated = false;\r\n        state.user = null;\r\n        state.role = null;\r\n        state.status = 'succeeded'; // Changed from 'idle' to 'succeeded'\r\n        state.error = null;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { resetAuth } = authSlice.actions;\r\nexport default authSlice.reducer;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"sources":["file:///F:/healthFirst/frontend/src/app/services/queueApi.ts"],"sourcesContent":["import api from '../lib/axiosClient';\r\nimport { Visit, VisitStatus, ApiResponse} from '../store/types'; // <-- Import the Visit type\r\n\r\n\r\nexport const fetchQueue = async (): Promise<Visit[]> => {\r\n  const response = await api.get<ApiResponse<Visit[]>>('/queue');\r\n  return response.data.data; \r\n};\r\n\r\n\r\nexport const updateStatus = async (visitId: string, status: VisitStatus): Promise<Visit> => {\r\n  const response = await api.patch<ApiResponse<Visit>>(`/queue/${visitId}/status`, { status });\r\n  return response.data.data;\r\n}"],"names":[],"mappings":";;;;;;AAAA;;AAIO,MAAM,aAAa;IACxB,MAAM,WAAW,MAAM,2IAAG,CAAC,GAAG,CAAuB;IACrD,OAAO,SAAS,IAAI,CAAC,IAAI;AAC3B;AAGO,MAAM,eAAe,OAAO,SAAiB;IAClD,MAAM,WAAW,MAAM,2IAAG,CAAC,KAAK,CAAqB,CAAC,OAAO,EAAE,QAAQ,OAAO,CAAC,EAAE;QAAE;IAAO;IAC1F,OAAO,SAAS,IAAI,CAAC,IAAI;AAC3B","debugId":null}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":["file:///F:/healthFirst/frontend/src/app/store/types.ts"],"sourcesContent":["\r\nexport enum UserRole {\r\n  ADMIN = 'ADMIN',\r\n  STAFF = 'STAFF',\r\n  DOCTOR = 'DOCTOR',\r\n}\r\n\r\nexport interface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  role: UserRole;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n  statusCode: number;\r\n  data: T; \r\n  message: string;\r\n  success: boolean;\r\n}\r\n\r\nexport interface AuthState {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  role: UserRole | null;\r\n  status: 'idle' | 'loading' | 'succeeded' | 'failed';\r\n  error: string | null | unknown; \r\n}\r\n\r\n\r\nexport enum VisitStatus {\r\n  SCHEDULED = 'SCHEDULED',\r\n  CANCELLED = 'CANCELLED',\r\n  CHECKED_IN = 'CHECKED_IN',\r\n  WITH_DOCTOR = 'WITH_DOCTOR',\r\n  COMPLETED = 'COMPLETED',\r\n}\r\n\r\nexport enum VisitType {\r\n  SCHEDULED = 'SCHEDULED',\r\n  WALK_IN = 'WALK_IN',\r\n}\r\n\r\nexport enum PriorityLevel {\r\n  NORMAL = 'NORMAL',\r\n  URGENT = 'URGENT',\r\n}\r\n\r\nexport interface VisitLog {\r\n  id: string;\r\n  status: VisitStatus;\r\n  timestamp: string; \r\n  notes?: string;\r\n}\r\n\r\nexport interface Visit {\r\n  id: string;\r\n  patientId: string;\r\n  doctorId: string;\r\n  visitType: VisitType;\r\n  priority: PriorityLevel;\r\n  scheduledTime?: string; // ISO date string from the backend\r\n  checkInTime?: string;   // ISO date string from the backend\r\n  currentStatus: VisitStatus;\r\n  createdAt: string;      // ISO date string from the backend\r\n  \r\n  patient: {\r\n    id: string;\r\n    name: string;\r\n  };\r\n  doctor: {\r\n    id: string;\r\n    user: {\r\n      name: string;\r\n    }\r\n  };\r\n  logs: VisitLog[];\r\n}"],"names":[],"mappings":";;;;;;;;;;AACO,IAAA,AAAK,kCAAA;;;;WAAA;;AA8BL,IAAA,AAAK,qCAAA;;;;;;WAAA;;AAQL,IAAA,AAAK,mCAAA;;;WAAA;;AAKL,IAAA,AAAK,uCAAA;;;WAAA","debugId":null}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":["file:///F:/healthFirst/frontend/src/app/store/queueSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport * as queueApi from '../services/queueApi';\r\nimport { Visit, VisitStatus } from './types'; \r\n\r\ninterface QueueState {\r\n  waiting: Visit[];\r\n  withDoctor: Visit[];\r\n  status: 'idle' | 'loading' | 'succeeded' | 'failed';\r\n  error: string | null | unknown;\r\n  movingVisitId: string | null; // To show a spinner on a specific card\r\n}\r\n\r\nexport const fetchQueueThunk = createAsyncThunk<Visit[]>('queue/fetch', async (_, { rejectWithValue }) => {\r\n  try {\r\n    return await queueApi.fetchQueue();\r\n  } catch (error: unknown) {\r\n      const errorMessage = error instanceof Error && 'response' in error && \r\n        typeof error.response === 'object' && error.response !== null &&\r\n        'data' in error.response && \r\n        typeof error.response.data === 'object' && error.response.data !== null &&\r\n        'message' in error.response.data\r\n        ? (error.response.data as { message: string }).message\r\n        : 'Failed to update status';\r\n      return rejectWithValue(errorMessage);\r\n    }\r\n});\r\n\r\nexport const updateStatusThunk = createAsyncThunk<Visit, { visitId: string, status: VisitStatus }>(\r\n  'queue/updateStatus',\r\n  async ({ visitId, status }, { rejectWithValue }) => {\r\n    try {\r\n      return await queueApi.updateStatus(visitId, status);\r\n    } catch (error: unknown) {\r\n      const errorMessage = error instanceof Error && 'response' in error && \r\n        typeof error.response === 'object' && error.response !== null &&\r\n        'data' in error.response && \r\n        typeof error.response.data === 'object' && error.response.data !== null &&\r\n        'message' in error.response.data\r\n        ? (error.response.data as { message: string }).message\r\n        : 'Failed to update status';\r\n      return rejectWithValue(errorMessage);\r\n    }\r\n  }\r\n);\r\n\r\nconst initialState: QueueState = {\r\n  waiting: [],\r\n  withDoctor: [],\r\n  status: 'idle',\r\n  error: null,\r\n  movingVisitId: null,\r\n};\r\n\r\nconst queueSlice = createSlice({\r\n  name: 'queue',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchQueueThunk.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchQueueThunk.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        // Split the fetched queue into two lists for the UI\r\n        state.waiting = action.payload.filter(v => v.currentStatus === VisitStatus.CHECKED_IN);\r\n        state.withDoctor = action.payload.filter(v => v.currentStatus === VisitStatus.WITH_DOCTOR);\r\n      })\r\n      .addCase(fetchQueueThunk.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.payload;\r\n      })\r\n      // Optimistic UI for status updates\r\n      .addCase(updateStatusThunk.pending, (state, action) => {\r\n        state.movingVisitId = action.meta.arg.visitId; // Show spinner on the card being moved\r\n      })\r\n      .addCase(updateStatusThunk.fulfilled, (state, action) => {\r\n        state.movingVisitId = null;\r\n        // Re-organize lists after a successful update\r\n        const updatedVisit = action.payload;\r\n        state.waiting = state.waiting.filter(v => v.id !== updatedVisit.id);\r\n        state.withDoctor = state.withDoctor.filter(v => v.id !== updatedVisit.id);\r\n\r\n        if (updatedVisit.currentStatus === VisitStatus.CHECKED_IN) {\r\n            state.waiting.push(updatedVisit);\r\n        } else if (updatedVisit.currentStatus === VisitStatus.WITH_DOCTOR) {\r\n            state.withDoctor.push(updatedVisit);\r\n        }\r\n      })\r\n      .addCase(updateStatusThunk.rejected, (state, action) => {\r\n        state.movingVisitId = null;\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport default queueSlice.reducer;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 371, "column": 0}, "map": {"version":3,"sources":["file:///F:/healthFirst/frontend/src/app/store/uiSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\n// Define the types for your modals\r\ntype ModalType = 'addWalkin' | 'addPatient' | 'addDoctor' | null;\r\n\r\ninterface UiState {\r\n  isModalOpen: boolean;\r\n  modalType: ModalType;\r\n}\r\n\r\nconst initialState: UiState = {\r\n  isModalOpen: false,\r\n  modalType: null,\r\n};\r\n\r\nconst uiSlice = createSlice({\r\n  name: 'ui',\r\n  initialState,\r\n  reducers: {\r\n    openModal: (state, action: PayloadAction<ModalType>) => {\r\n      state.isModalOpen = true;\r\n      state.modalType = action.payload;\r\n    },\r\n    closeModal: (state) => {\r\n      state.isModalOpen = false;\r\n      state.modalType = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { openModal, closeModal } = uiSlice.actions;\r\nexport default uiSlice.reducer;"],"names":[],"mappings":";;;;;;;;AAAA;;AAUA,MAAM,eAAwB;IAC5B,aAAa;IACb,WAAW;AACb;AAEA,MAAM,UAAU,IAAA,0MAAW,EAAC;IAC1B,MAAM;IACN;IACA,UAAU;QACR,WAAW,CAAC,OAAO;YACjB,MAAM,WAAW,GAAG;YACpB,MAAM,SAAS,GAAG,OAAO,OAAO;QAClC;QACA,YAAY,CAAC;YACX,MAAM,WAAW,GAAG;YACpB,MAAM,SAAS,GAAG;QACpB;IACF;AACF;AAEO,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,QAAQ,OAAO;uCACzC,QAAQ,OAAO","debugId":null}},
    {"offset": {"line": 405, "column": 0}, "map": {"version":3,"sources":["file:///F:/healthFirst/frontend/src/app/services/visitApi.ts"],"sourcesContent":["import api from '../lib/axiosClient';\r\nimport { Visit, ApiResponse } from '../store/types'; \r\nimport { CreateVisitInput } from '../types/visit.types'; // Keep API input types separate\r\n\r\n\r\nexport const createVisit = async (data: CreateVisitInput): Promise<Visit> => {\r\n  const response = await api.post<ApiResponse<Visit>>('/visits', data);\r\n  return response.data.data;\r\n};\r\n\r\nexport interface VisitHistoryQuery {\r\n  date?: string;       // For filtering by a single day\r\n  patientId?: string;  // For filtering by a specific patient\r\n}\r\n\r\nexport interface VisitHistoryResponse {\r\n  visits: Visit[];\r\n  summary: {\r\n    totalVisits: number;\r\n    completed: number;\r\n    cancelled: number;\r\n    scheduled: number;\r\n    walkIn: number;\r\n    urgent: number;\r\n  };\r\n}\r\n\r\n\r\nexport const getVisitHistory = async (params: VisitHistoryQuery): Promise<VisitHistoryResponse> => {\r\n  const response = await api.get<ApiResponse<VisitHistoryResponse>>('/visits/history', { params });\r\n  return response.data.data;\r\n};\r\n\r\nexport const exportVisitHistory = async (params: VisitHistoryQuery): Promise<Blob> => {\r\n    const response = await api.get('/visits/history/export', { \r\n        params,\r\n        responseType: 'blob',\r\n    });\r\n    return response.data as Blob;\r\n};\r\n\r\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAKO,MAAM,cAAc,OAAO;IAChC,MAAM,WAAW,MAAM,2IAAG,CAAC,IAAI,CAAqB,WAAW;IAC/D,OAAO,SAAS,IAAI,CAAC,IAAI;AAC3B;AAoBO,MAAM,kBAAkB,OAAO;IACpC,MAAM,WAAW,MAAM,2IAAG,CAAC,GAAG,CAAoC,mBAAmB;QAAE;IAAO;IAC9F,OAAO,SAAS,IAAI,CAAC,IAAI;AAC3B;AAEO,MAAM,qBAAqB,OAAO;IACrC,MAAM,WAAW,MAAM,2IAAG,CAAC,GAAG,CAAC,0BAA0B;QACrD;QACA,cAAc;IAClB;IACA,OAAO,SAAS,IAAI;AACxB","debugId":null}},
    {"offset": {"line": 436, "column": 0}, "map": {"version":3,"sources":["file:///F:/healthFirst/frontend/src/app/store/visitHistorySlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\r\nimport { getVisitHistory, VisitHistoryQuery, VisitHistoryResponse } from '../services/visitApi';\r\nimport { Visit } from './types';\r\nimport axios from 'axios';\r\n\r\nfunction isAxiosErrorType(error: unknown): error is { isAxiosError: boolean; response?: { data?: { message?: string } } } {\r\n    return typeof error === 'object' && error !== null && 'isAxiosError' in error;\r\n}\r\n\r\n\r\ninterface VisitHistoryState {\r\n    visits: Visit[];\r\n    summary: VisitHistoryResponse['summary'] | null;\r\n    status: 'idle' | 'loading' | 'succeeded' | 'failed';\r\n    error: string | null | unknown;\r\n}\r\n\r\nexport const fetchVisitHistory = createAsyncThunk<\r\n    VisitHistoryResponse,\r\n    VisitHistoryQuery,\r\n    { rejectValue: string }\r\n>(\r\n    'visitHistory/fetch',\r\n    async (params, { rejectWithValue }) => {\r\n        try {\r\n            const data = await getVisitHistory(params);\r\n            return data;\r\n        } catch (error: unknown) {\r\n            if (isAxiosErrorType(error) && error.response) {\r\n                return rejectWithValue(error.response.data?.message || 'An API error occurred');\r\n            }\r\n            return rejectWithValue('An unexpected error occurred');\r\n        }\r\n\r\n\r\n    }\r\n);\r\n\r\nconst initialState: VisitHistoryState = {\r\n    visits: [],\r\n    summary: null,\r\n    status: 'idle',\r\n    error: null,\r\n};\r\n\r\nconst visitHistorySlice = createSlice({\r\n    name: 'visitHistory',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchVisitHistory.pending, (state) => {\r\n                state.status = 'loading';\r\n                state.error = null;\r\n            })\r\n            .addCase(fetchVisitHistory.fulfilled, (state, action: PayloadAction<VisitHistoryResponse>) => {\r\n                state.status = 'succeeded';\r\n                state.visits = action.payload.visits;\r\n                state.summary = action.payload.summary;\r\n            })\r\n            .addCase(fetchVisitHistory.rejected, (state, action) => {\r\n                state.status = 'failed';\r\n                state.error = action.payload;\r\n            });\r\n    },\r\n});\r\n\r\nexport default visitHistorySlice.reducer;"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAIA,SAAS,iBAAiB,KAAc;IACpC,OAAO,OAAO,UAAU,YAAY,UAAU,QAAQ,kBAAkB;AAC5E;AAUO,MAAM,oBAAoB,IAAA,+MAAgB,EAK7C,sBACA,OAAO,QAAQ,EAAE,eAAe,EAAE;IAC9B,IAAI;QACA,MAAM,OAAO,MAAM,IAAA,qJAAe,EAAC;QACnC,OAAO;IACX,EAAE,OAAO,OAAgB;QACrB,IAAI,iBAAiB,UAAU,MAAM,QAAQ,EAAE;YAC3C,OAAO,gBAAgB,MAAM,QAAQ,CAAC,IAAI,EAAE,WAAW;QAC3D;QACA,OAAO,gBAAgB;IAC3B;AAGJ;AAGJ,MAAM,eAAkC;IACpC,QAAQ,EAAE;IACV,SAAS;IACT,QAAQ;IACR,OAAO;AACX;AAEA,MAAM,oBAAoB,IAAA,0MAAW,EAAC;IAClC,MAAM;IACN;IACA,UAAU,CAAC;IACX,eAAe,CAAC;QACZ,QACK,OAAO,CAAC,kBAAkB,OAAO,EAAE,CAAC;YACjC,MAAM,MAAM,GAAG;YACf,MAAM,KAAK,GAAG;QAClB,GACC,OAAO,CAAC,kBAAkB,SAAS,EAAE,CAAC,OAAO;YAC1C,MAAM,MAAM,GAAG;YACf,MAAM,MAAM,GAAG,OAAO,OAAO,CAAC,MAAM;YACpC,MAAM,OAAO,GAAG,OAAO,OAAO,CAAC,OAAO;QAC1C,GACC,OAAO,CAAC,kBAAkB,QAAQ,EAAE,CAAC,OAAO;YACzC,MAAM,MAAM,GAAG;YACf,MAAM,KAAK,GAAG,OAAO,OAAO;QAChC;IACR;AACJ;uCAEe,kBAAkB,OAAO","debugId":null}},
    {"offset": {"line": 489, "column": 0}, "map": {"version":3,"sources":["file:///F:/healthFirst/frontend/src/app/store/store.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\r\nimport { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux';\r\nimport authReducer from './authSlice';\r\nimport queueReducer from './queueSlice';\r\nimport uiReducer from './uiSlice';\r\nimport visitHistoryReducer from './visitHistorySlice';\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    auth: authReducer,\r\n    queue: queueReducer,\r\n    ui: uiReducer,\r\n    visitHistory: visitHistoryReducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAGO,MAAM,QAAQ,IAAA,6MAAc,EAAC;IAClC,SAAS;QACP,MAAM,4IAAW;QACjB,OAAO,4IAAY;QACnB,IAAI,yIAAS;QACb,cAAc,mJAAmB;IACnC;AACF;AAKO,MAAM,iBAAiB,IAAM,IAAA,wKAAW;AACxC,MAAM,iBAAkD,wKAAW","debugId":null}},
    {"offset": {"line": 523, "column": 0}, "map": {"version":3,"sources":["file:///F:/healthFirst/frontend/src/app/StoreProvider.tsx"],"sourcesContent":["\"use client\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store/store\";\r\nimport { useEffect } from \"react\";\r\nimport { checkAuthStatus } from \"./store/authSlice\";\r\n\r\nfunction AuthInitializer({ children }: { children: React.ReactNode }) {\r\n  useEffect(() => {\r\n    store.dispatch(checkAuthStatus());\r\n  }, []);\r\n  return <>{children}</>;\r\n}\r\n\r\nexport function StoreProvider({ children }: { children: React.ReactNode }) {\r\n  return (\r\n    <Provider store={store}>\r\n      <AuthInitializer>{children}</AuthInitializer>\r\n    </Provider>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;AACA;AACA;AACA;AACA;AAJA;;;;;;AAMA,SAAS,gBAAgB,EAAE,QAAQ,EAAiC;IAClE,IAAA,kNAAS,EAAC;QACR,qIAAK,CAAC,QAAQ,CAAC,IAAA,oJAAe;IAChC,GAAG,EAAE;IACL,qBAAO;kBAAG;;AACZ;AAEO,SAAS,cAAc,EAAE,QAAQ,EAAiC;IACvE,qBACE,8OAAC,qKAAQ;QAAC,OAAO,qIAAK;kBACpB,cAAA,8OAAC;sBAAiB;;;;;;;;;;;AAGxB","debugId":null}}]
}